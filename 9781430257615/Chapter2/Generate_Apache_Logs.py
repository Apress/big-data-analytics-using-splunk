#!/usr/bin/python
 
# Import libraries used by the data generator

import random
import datetime
import time
import os
from platform import system

# ###########################################################################
# Big Data Analytics Using Splunk
# By Peter Zadrozny and Raghu Kodali
# Apress, May 2013 ISBN 978-1-4302-5761-5
# Copyright (C) 2013 Peter Zadrozny and Raghu Kodali
# ###########################################################################

# ############################################################################
# This is a data generator for MyGizmoStore.com
##############################################################################

# ############################################################################
# Following variables are used to generate the errors in the log entries and
# control the maximum number of events to be generated
# percentServerErrors - maps to percentage of HTTP 503 errors
# percentUserErrors - maps to percentage of user errors
# htmlErrors - maps to HTTP errors in the class of 4xx
# totalLogEntries - maps to total number of events generated by the script
# Change the values of these variables to customize the generated log files
# ############################################################################


percentServerErrors = 30
percentUserErrors = 25
htmlErrors = 30
totalLogEntries = 50000


# ###############################################################################################################
# Following variables are used to as static data sets by the data generator
# Change the values of these variables to customize the generated log files
# productIds - maps to product identifiers sold in MyGizmoStore.com
# itemIds - maps to item identifiers sold in MyGizmoStore.com
# catIds - maps to product categories in MyGizmoStore.com
# actions - maps to actions taken in each simulated http request
# badstatuses - maps to HTTP status codes used to simulate bad HTTP status in class of 4xx and 5xx
# methods - maps to number of GET and POST
# windowsFiles - is the directory location where the generated files will be placed by default in Windows environment
# files - is the directory location where the generated files will be placed by default in LUW environment
# baseURL - maps to the URL of MyGizmoStore
# useragents - maps to a set of browser - version combinations that are used to simulate the referrers
# refererURIs - maps to the web sites that act as referrers for the requests
# fourOhFours - maps to the resource (HTML page or image or document) that is used for HTTP 404 errors
# purchaseErrors - maps to the errors simulated that happen during the purchase process
# ################################################################################################################



productIds = ["CA-NY-99", "CA-FL-88","TX-IND-77","MN9-SIN-66","NJ8-HKG-55","PA-DEL-44","FL-NYC-44","NC-SIN-33","OR-DEN-33","AZ-LON-22"]
itemIds = ["HYD-65","HYD-33","HYD-11","HYD-1","HYD-29","HYD-58","HYD-87","HYD-82","HYD-97","HYD-6","HYD-23","HYD-17","HYD-12","HYD-89","HYD-30","HYD-2"]
catIds = ["BLUE_GIZMOS","RED_GADGETS","WHITE_WIDGETS","ORANGE_WATCHMACALLITS","PURPLE_DOOHICKEYS","BLACK_DOODADS"]
actions = ["purchase", "addtocart", "addtocart","remove", "view", "view", "view", "view", "changequantity"]
badstatuses = ["503", "400", "406", "404", "408", "500"]
methods = ["GET", "GET", "GET", "GET", "POST"]
windowsFiles = [ "C:\\opt\\log\\BigDBBook-www1\\access.log", "C:\\opt\\log\\BigDBBook-www2\\access.log", "C:\\opt\\log\\BigDBBook-www3\\access.log"]
files = [ "/opt/log/BigDBBook-www1/access.log", "/opt/log/BigDBBook-www2/access.log", "/opt/log/BigDBBook-www3/access.log"]
baseUrl = "http://www.MyGizmoStore.com"
useragents = [
	"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1)",
	"Opera/9.01 (Windows NT 5.1; U; en)",
	"Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_3; en-US) AppleWebKit/533.4 (KHTML, like Gecko) Chrome/5.0.375.38 Safari/533.4",
	"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)",
	"Googlebot/2.1 ( http://www.googlebot.com/bot.html) ",
	"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322)",
	"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.8.1.6) Gecko/20070725 Firefox/2.0.0.6",
	"Opera/9.20 (Windows NT 6.0; U; en)"
	]
refererURIs = ["http://www.MyGizmoStore.com", "http://www.google.com", "http://www.yahoo.com","http://www.bing.com"]
fourOhFours = ["/product.screen?productId=8675309&","/stuff/logo.ico?","/numa/numa.html?","/search.do?items=vase&","/rush/signals.zip?","/passwords.pdf?","/hidden/anna_nicole.html?","/productscreen.html?t=ou812&","show.do?productId=products&"]
purchaseErrors = ["/cart/error.do?msg=CreditNotAccepted","/cart/error.do?msg=FormError","/cart/error.do?msg=NothingInCart","/cart/error.do?msg=CreditDoesNotMatch","/cart/error.do?msg=CanNotGetCart"]




# Default value used as a base for the jsessionid calculation
jSessionNumber = 4949

# ##################################################################################
# Setup start and stop times - calculate the start and stop times
# By default the time period is calculated for 30 days,
# Change days=30 to the required number to simulate either longer or shorter periods
# Check if the operating systems is Windows and set the value
# ###################################################################################

endTime = datetime.datetime.today()
currentTime = endTime - datetime.timedelta(days=30)
logEntryCounter = 0
if system() == 'Windows':
    files = windowsFiles

# ##########################################################################
# Check if the directory structure is available to create the log files
# and create if structure is not in place yet
# ##########################################################################

def setupFileSystem():
    global files   
    for file in files:
        dirname = os.path.dirname(file)
        if os.path.exists(dirname):
            if os.path.exists(file):
                print "Writing to " + file
            else:
                print "Creating " + file  #it will get created when data is written later
        else:
            print "Creating " + dirname
            os.makedirs(dirname)



# ##########################################################################################
# Generate log entries using generate_good_logEntry and generate_bad_logEntry functions
# The log generation keeps happening until the end of specified time period is hit or the
# number of events specified in totalLogEntries is reached.
# Each session makes use of a particular useragent and the event is assigned one of the 3 hosts
# A session id is also created that would last with the session
# A random number of events are created from each client and based on randomization html errors are thrown in to the log entry
# A short wait time is added before generating the next event
# ###########################################################################################


# ###################################################################################################
# This is a function to generate a good log entry
# The function makes use of static data sets defined and picks the values for each log entry randomly
# ###################################################################################################
def generate_good_logEntry(ipAddress, agent, referer, jsessionId, files, hostName, percentServerErrors, percentUserErrors, eventTime):
	productId = productIds[random.randint(0, len(productIds) - 1)]
	itemId = itemIds[random.randint(0, len(itemIds) - 1)]
	catId = catIds[random.randint(0, len(catIds) - 1)]
	action = actions[random.randint(0, len(actions) - 1)]
	status = '200'
	method = methods[random.randint(0, len(methods) - 1)]
	bytesXferred = str(random.randint(200,4000))
	timeTaken =  str(random.randint(100,1000))
	uris = [
	"/cart.do?action=" + action + "&itemId=" + itemId,
	"/product.screen?productId=" + productId,
	"/category.screen?categoryId=" + catId,
	"/oldlink?itemId=" + itemId
	]
	uri = uris[random.randint(0, len(uris) - 1)] + "&JSESSIONID=" + jsessionId
	if referer == "":
		referralUri = baseUrl + uris[random.randint(0, len(uris) - 1)]
	else:
		referralUri = referer
	# If an item is purchased, make sure it has been viewed and added to cart first
		if action == 'purchase':
			print 'purchase loop'
			#create product view
			referralUri = baseUrl + "/category.screen?categoryId=" + catId
			uri = "/product.screen?productId=" + productId + "&JSESSIONID=" + jsessionId
			nextrefer = "/product.screen?productId=" + productId
			bytesXferred = str(random.randint(200,4000))
			timeTaken =  str(random.randint(100,1000))
			event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
			write_logEntry(event,files,hostName)
			eventTime = eventTime + datetime.timedelta(seconds=(random.randint(1,9)))
			#add product to cart
			method = "POST"
			referralUri = baseUrl + nextrefer
			uri = "/cart.do?action=" + 'addtocart' + "&itemId=" + itemId + "&productId=" + productId + "&JSESSIONID=" + jsessionId
			nextrefer = "/cart.do?action=" + 'addtocart' + "&itemId=" + itemId + "&productId=" + productId
			now = datetime.datetime.today()
			bytesXferred = str(random.randint(200,4000))
			timeTaken =  str(random.randint(100,1000))
			event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
			write_logEntry(event,files,hostName)
			eventTime = eventTime + datetime.timedelta(seconds=(random.randint(1,9)))
		#Add random chance of 503 error at purchase -- about 5% of the time
			if random.randint(1,100) < percentServerErrors:
				uri = "/cart.do?action=" + action + "&itemId=" + itemId + "&JSESSIONID=" + jsessionId
				referralUri = baseUrl + nextrefer
				nextrefer = "/cart.do?action=" + action + "&itemId=" + itemId
				status = "503"
				now = datetime.datetime.today()
				bytesXferred = str(random.randint(200,4000))
				timeTaken =  str(random.randint(100,1000))
				event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
				write_logEntry(event,files,hostName)
				# Let the generator know the server is broken
				return True
			else:
				#Purchase product
				referralUri = baseUrl + nextrefer
				uri = "/cart.do?action=" + action + "&itemId=" + itemId + "&JSESSIONID=" + jsessionId
				nextrefer = "/cart.do?action=" + action + "&itemId=" + itemId
				bytesXferred = str(random.randint(200,4000))
				timeTaken =  str(random.randint(100,1000))
				event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
				write_logEntry(event,files,hostName)
				referralUri = baseUrl + nextrefer
				eventTime = eventTime + datetime.timedelta(seconds=(random.randint(1,3)))
				#Add random chance that user get success page, leaves cart or gets cart error
				if random.randint(1,100) < percentUserErrors:
					#Add random chance of user abandoning cart - 15%
					if random.randint(1,100) < 15:
						pass
					else:
						uri = purchaseErrors[random.randint(0, len(purchaseErrors) - 1)] + "&JSESSIONID=" + jsessionId
						now = datetime.datetime.today()
						bytesXferred = str(random.randint(200,4000))
						timeTaken =  str(random.randint(100,1000))
						event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
						write_logEntry(event,files,hostName)
				else:
					uri = '/cart/success.do' + "?JSESSIONID=" + jsessionId
					now = datetime.datetime.today()
					bytesXferred = str(random.randint(200,4000))
					timeTaken =  str(random.randint(100,1000))
					event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
					write_logEntry(event,files,hostName)
				# Let the generator know the server is not broken
				return False
		else:
		          event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
		          write_logEntry(event,files,hostName)
		# Let the generator know the server is not broken
		return False

# #####################################################################################################
# This is a function to generate a bad log entry
# The function makes use of static data sets defined and picks the values for each log entry randomly
# #####################################################################################################


def generate_bad_logEntry(ipAddress, agent, referer, jsessionId, files, hostName, eventTime):

        productId = productIds[random.randint(0, len(productIds) - 1)]
        itemId = itemIds[random.randint(0, len(itemIds) - 1)]
        catId = catIds[random.randint(0, len(catIds) - 1)]
        action = actions[random.randint(0, len(actions) - 1)]
        status = badstatuses[random.randint(0, len(badstatuses) - 1)]
        method = methods[random.randint(0, len(methods) - 1)]
        bytesXferred = str(random.randint(200,4000))
        timeTaken =  str(random.randint(100,1000))
        uris = [
        "/cart.do?action=" + action + "&itemId=" + itemId,
        "/product.screen?productId=" + productId,
        "/category.screen?categoryId=" + catId,
        "/oldlink?itemId=" + itemId
        ]
        if status == '404':
            uri = fourOhFours[random.randint(0, len(fourOhFours) - 1)] + "JSESSIONID=" + jsessionId
        else:
            uri = uris[random.randint(0, len(uris) - 1)] + "&JSESSIONID=" + jsessionId
        if referer == "":
            referralUri = baseUrl + uris[random.randint(0, len(uris) - 1)]
        else:
            referralUri = referer
        event = ipAddress + " - - [" + eventTime.strftime('%d/%b/%Y:%H:%M:%S') + "] \"" + method + " " + uri + " HTTP 1.1\" " + status + " " + bytesXferred + " \"" + referralUri + "\" \"" + agent + "\" " + timeTaken + "\n"
        write_logEntry(event,files,hostName)
        #If server is not responding because of 503 HTTP status, inform the calling program which is the mainLogGenerator()
        if status == '503':
            return True
        else:
            return False

# ##############################################################################################################
# This is a function used to write log entries and called from generate_good_logEntry and generate_bad_logEntry
# For each entry the file is opened, log gets writtent and the file gets closed
# ###############################################################################################################



def write_logEntry(line,files,hostName):
    print line
    #write out the event, open and close the file each time for proper tailing
    output_file = open(files[hostName], 'a')
    output_file.write(line)
    output_file.close()



# ##############################################################
# Function to generate a random IP address
# ##############################################################

def randomIPAddress():
    return ".".join(str(random.randint(1, 255)) for i in range(4))

# ##################################################################
# This is the main log generator
##################################################################


def mainLogGenerator():
    print "Starting log generation !!!"
    global currentTime
    global endTime
    global logEntryCounter
    global totalLogEntries
    global jSessionNumber
    global refererURIs
    global htmlErrors
    while currentTime < endTime and logEntryCounter < totalLogEntries:
        clientIP = randomIPAddress()
        useragent = useragents[random.randint(0, len(useragents) - 1)]
        hostName = random.randint(0, len(files)-1)
        jSessionNumber = jSessionNumber + random.randint(1,17)
        jsessionId = "CA" + str(random.randint(0, 10)) + "MO" + str(random.randint(1, 10)) + "AZ" + str(random.randint(1, 10)) + "USANA" + str(jSessionNumber)
    # generate a random number of log entries from this client to this hostName
        numberOfEnteriesForThisClient = random.randint(1,12)
        print "Total entries for this client = " + str(numberOfEnteriesForThisClient)
        for logEntryNumber in range(numberOfEnteriesForThisClient):
            if currentTime > endTime:
                break
        # if this is a first log entry, grab a referrer from refererURIs (static list of referrers)
            if logEntryNumber == 0:
                refererURI = refererURIs[random.randint(0, len(refererURIs) - 1)]
            else:
                refererURI = ""
        # Made a decision if a html error needs to be thrown
            if random.randint(1,100) < htmlErrors and logEntryNumber !=0:
                l = generate_bad_logEntry(clientIP, useragent, refererURI, jsessionId, files, hostName, currentTime)
                if l == True:
                    broke_server = True
                else:
                    broke_server = False
            else:
                l = generate_good_logEntry(clientIP, useragent, refererURI, jsessionId, files, hostName, percentServerErrors, percentUserErrors, currentTime)
                if l == True:
                    broke_server = True
                else:
                    broke_server = False
            if broke_server:
                break   #if a server is broken (503) clear clients and go to the next client/hostName combination
        #wait a short time before generating next event for this client/hostName combination
            currentTime = currentTime + datetime.timedelta(seconds=(random.randint(1,9)))
            logEntryCounter = logEntryCounter + 1
        currentTime = currentTime + datetime.timedelta(seconds=(random.randint(500,1000)))


# ########################################################################
# Once every thing is ready, call setupFileSystem() to create file system
# and call mainLogGenerator() to create the log entries
# ########################################################################
setupFileSystem()
print "File System setup completed sucessfully !!!"
mainLogGenerator()
print "Log generation completed successfully !!!"  
print "Check /opt/log directory !!!"   

